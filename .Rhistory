# 1 - sum irrigated and rainfed maize/potato
rainfed_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = 'Areas', subfolderX2 = main_param , pattern = paste0('Rainfed_', tolower(param)))
irrig_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = 'Areas', subfolderX2 = main_param , pattern = paste0('Irrigated_', tolower(param)))
AR_maize <- irrig_maize + rainfed_maize
AR_maize[, 'id'] <- seq(1,7)
AR_maize <- AR_maize[, c('id','X1989','X1999','X2009')]
# 2 - sum AG_census_muni maize/potato
AR_census_maize <- compute_INE_muni_agrarian(INE_param, main_param, param)
# 3 - Ag_census_muni / AR_maize /potato
adj_maize <- AR_census_maize
adj_maize <- AR_maize / AR_census_maize
adj_maize[, 'id'] <- seq(1,7)
names(adj_maize)[1] <- 'agrarian_region_id'
adj_maize <- data_cleaning(adj_maize)
# 4 - correct Ag_census_muni maize/potato based on #3
muni_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param, pattern = param)
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, adj_maize, 'agrarian_region_id')
yrs <- c('X1989','X1999','X2009')
muni_maize[, yrs] <- sapply(yrs, function(x) round(disagg_df[, x] * muni_maize[, x], 1))
return(muni_maize)
rm(list=c('rainfed_maize','irrig_maize', 'adj_maize','muni_maize','disagg_df','yrs'))
}
general_data_correction_function <- function(INE_param, main_param, param) {
# general function to correct AG_census_muni data absed on annual AR_data
AR <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = INE_param, subfolderX2 = main_param , pattern = param)
AR <- AR[, c('id','X1989','X1999','X2009')]
# 1 - sum AG_census_municipality to the AR level
AR_census <- compute_INE_muni_agrarian(INE_param, main_param, param)
# 2 - AG_census / AR
adj_data <- AR_census
adj_data <- AR / AR_census
adj_data[, 'id'] <- seq(1,7)
names(adj_data)[1] <- 'agrarian_region_id'
adj_data <- data_cleaning(adj_data)
# 3 - correct AG_census_muni based on #2
muni_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param, pattern = param)
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, adj_data, 'agrarian_region_id')
print('Correcting data --------')
yrs <- c('X1989','X1999','X2009')
muni_df[, yrs] <- sapply(yrs, function(x) round(disagg_df[, x] * muni_df[, x], 0))
return(muni_df)
rm(list=c('AR','AR_census','adj_data','muni_df','disagg_df','yrs'))
}
correct_irrigated_rainfed_crops_INE_muni <- function(INE_param = 'Areas',
main_param = 'Cereals',
param = 'Maize') {
# corrects crops where data outside AG_census yrs is disaggregated into Rainfed_ and Irrigated
# corrects AG_census municipality for the total acreage of potato and maize
# 1 - sum irrigated and rainfed maize/potato
rainfed_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = 'Areas', subfolderX2 = main_param , pattern = paste0('Rainfed_', tolower(param)))
irrig_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = 'Areas', subfolderX2 = main_param , pattern = paste0('Irrigated_', tolower(param)))
AR_maize <- irrig_maize + rainfed_maize
AR_maize[, 'id'] <- seq(1,7)
AR_maize <- AR_maize[, c('id','X1989','X1999','X2009')]
# 2 - sum AG_census_muni maize/potato
AR_census_maize <- compute_INE_muni_agrarian(INE_param, main_param, param)
# 3 - Ag_census_muni / AR_maize /potato
adj_maize <- AR_census_maize
adj_maize <- AR_maize / AR_census_maize
adj_maize[, 'id'] <- seq(1,7)
names(adj_maize)[1] <- 'agrarian_region_id'
adj_maize <- data_cleaning(adj_maize)
# 4 - correct Ag_census_muni maize/potato based on #3
muni_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param, pattern = param)
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, adj_maize, 'agrarian_region_id')
yrs <- c('X1989','X1999','X2009')
muni_maize[, yrs] <- sapply(yrs, function(x) round(disagg_df[, x] * muni_maize[, x], 1))
return(muni_maize)
rm(list=c('rainfed_maize','irrig_maize', 'adj_maize','muni_maize','disagg_df','yrs'))
}
compute_disaggregated_irrigated_rainfed_crops_INE_muni <- function(management,
INE_param = 'Areas',
main_param = 'Cereals',
param = 'Maize'
) {
# management is either Rainfed or Irrigated
# while correct_irrigated_rainfed_crops_INE_muni corrects the municipality data for the AG_census based on the sum of rainfed and irrigated in the other years
# this function disaggregates the new_muni into its rainfed and irrigated fraction
new_muni <- correct_irrigated_rainfed_crops_INE_muni(INE_param, main_param, param)
AR_new_muni <-loop_INE_muni_agrarian(new_muni)
names(AR_new_muni) <- c('id','X1989','X1999','X2009')
manag_maize <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = 'Areas', subfolderX2 = main_param , pattern = paste0(management,'_', tolower(param)))
manag_maize <- manag_maize[, c('id','X1989','X1999','X2009')]
# calculate FRAC of a given management practice (rainfed, irrigated) at the AR
FRAC_AR_manag_maize <- manag_maize / AR_new_muni
FRAC_AR_manag_maize[, 'id'] <- seq(1,7)
names(FRAC_AR_manag_maize) <- c('agrarian_region_id','X1989','X1999','X2009')
FRAC_AR_manag_maize <- data_cleaning(FRAC_AR_manag_maize)
# disaggregate to the municipality
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, FRAC_AR_manag_maize, 'agrarian_region_id')
yrs <- c('X1989','X1999','X2009')
new_muni[, yrs] <- sapply(yrs, function(x) round(disagg_df[, x] * new_muni[, x], 1))
return(new_muni)
rm(list=c('new_muni','AR_new_muni','manag_maize','FRAC_AR_manag_maize','disagg_df'))
}
correct_other_fresh_fruits <- function(INE_param = 'Areas',
main_param = 'Fresh_fruits'
) {
plum <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = INE_param, subfolderX2 = main_param , pattern = 'Plum')
fig <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = INE_param, subfolderX2 = main_param , pattern = 'Fig')
AR_other <- fig + plum
AR_other[, 'id'] <- seq(1,7)
AR_other <- AR_other[, c('id','X1989','X1999','X2009')]
# 2 - sum AG_census_muni other fresh fruits
AR_census_other_fresh <- compute_INE_muni_agrarian(INE_param, main_param, param = 'other_fresh')
# 3 - Ag_census_muni / AR
adj_other <- AR_census_other_fresh
adj_other <- AR_other / AR_census_other_fresh
adj_other[, 'id'] <- seq(1,7)
names(adj_other)[1] <- 'agrarian_region_id'
adj_other <- data_cleaning(adj_other)
# 4 - correct Ag_census_muni  based on #3
muni_other <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param, pattern = 'other_fresh')
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, adj_other, 'agrarian_region_id')
yrs <- c('X1989','X1999','X2009')
muni_other[, yrs] <- sapply(yrs, function(x) round(disagg_df[, x] * muni_other[, x], 1))
return(muni_other)
rm(list=c('plum','fig','AR_other','AR_other','AR_census_other_fresh','adj_other','disagg_df','yrs'))
}
correct_tomatoes <- function(INE_param = 'Areas',
main_param = 'Industry_crops',
param = 'Tomato') {
# 1 - sum AG_census other_industry at the AR level
# 2- correct AG_census based on AR_tomato for 1989,1999,2009
AR_tomato <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = 'Areas', subfolderX2 = 'Industry_crops', pattern = 'Tomato')
AR_tomato <- AR_tomato[, c('id','X1989','X1999','X2009')]
AG_muni_other_industry <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Industry_crops', pattern = 'Other_industry')
# 1 - sum AG_census other_industry at the AR level
AR_AG_muni_other <- compute_INE_muni_agrarian('Areas','Industry_crops','Other_industry')
# 2 - calculate FRAC_AR
FRAC_AR <- AR_tomato / AR_AG_muni_other
FRAC_AR[, 'id'] <- seq(1,7)
names(FRAC_AR)[1] <- 'agrarian_region_id'
FRAC_AR <- data_cleaning(FRAC_AR)
# 3 - correct AG_census_muni based on #2
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, FRAC_AR, 'agrarian_region_id')
print('Correcting data --------')
yrs <- c('X1989','X1999','X2009')
AG_muni_other_industry[, yrs] <- sapply(yrs, function(x) round(disagg_df[, x] * AG_muni_other_industry[, x], 1))
return(AG_muni_other_industry)
rm(list=c('AR_tomato','AG_muni_other_industry','AR_AG_muni_other','FRAC_AR','disagg_df','yrs'))
}
compute_corrected_INE_param_AG_census('Areas')
compute_annual_interpolated_param_func <- function(INE_param, main_param, param) {
# calculates corrected new_muni for a given param
# time rules: expressed in average_AG_census_interpolation_period()
# 1 - compile new_muni data based on the time-rules established in average_AG_census_interpolation_period
AG_muni <- average_AG_census_interpolation_period(INE_param, main_param, param)
# 2 - call the AR data for a given param
AR <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = INE_param, subfolderX2 = main_param, pattern = param)
# 3 - compute the new_muni at the AR level
AG_AR <- loop_INE_muni_agrarian(df_merge = AG_muni, yrs = as.character(seq(1987,2017)))
calc_yrs <- paste0('X',seq(1987,2017))
names(AG_AR) <- c('id', paste0('X',seq(1987,2017)))
for (i in calc_yrs) {
# 1 - calculate FRAC of AR_yr / AR_AG_census
FRAC_AR <- data.frame(agrarian_region_id = seq(1,7))
FRAC_AR[, 'FRAC_AR'] <- AR[, i] / AG_AR[, i]
# 2 - call spatial disaggregation and create a template calculation
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, FRAC_AR, 'agrarian_region_id')
# 4 - calculate new_muni
AG_muni[, i] <- round(AG_muni[, i] * disagg_df[, 'FRAC_AR'], 1)
}
return(AG_muni)
rm(list=c('AR','AG_AR','FRAC_AR','disagg_df'))
}
linear_interpolation_other_params_func <- function(INE_param, main_param, param) {
# support function to linear interpolate other_dried_pulses and other_fresh
# this is used since there are no data outside the AG_census years
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param , pattern = param)
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
# interpolate the data to the other years
xout <- c(1987,1988,seq(1990,1998), seq(2000,2008), seq(2010,2017))
df <- linear_interpolation(muni_df = df)
template <- cbind(template, df)
return(template)
rm(list=c('param_interpol','yrs','df','new_yrs','xout'))
}
loop_annual_interpolated_param <- function(INE_param) {
standard_params <- get_activity_data(module = 'Nutrients', folder = 'Correct_data_Municipality', pattern = 'Standard_params')
param_col <- ifelse(INE_param == 'Areas', 'Crop', 'Animals')
main_param_col <- ifelse(INE_param == 'Areas', 'Main_crop', 'Main_animals')
for (i in 1:nrow(standard_params)) {
main_param <- standard_params[i, main_param_col]
param <- standard_params[i, param_col]
print(paste0('================= Downscaling and interpolating in-between AG_census municipality data for ', param))
if (param == 'Maize' | param == 'Potato') {
manag <- c('Rainfed','Irrigated')
for (j in manag) {
f_param <- paste0(j, '_', tolower(param))
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, f_param)
export_file(module = 'Nutrients', file = param_interpol, filename = f_param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
}
# other_dried_pulses and other_fresh must be linealry interpolated between 1989, 1999 and 2009 as no AR data is available
else if (param == 'Other_dried_pulses' | param == 'other_fresh') {
param_interpol <- linear_interpolation_other_params_func(INE_param, main_param, param)
export_file(module = 'Nutrients', file = param_interpol, filename = param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
else {
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, param)
export_file(module = 'Nutrients', file = param_interpol, filename = param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
}
rm(list=c('standard_params','param_col','main_param_col'))
}
param_interpol <- compute_annual_interpolated_param_func('Areas','Dried_nuts','Almond')
param_interpol
compute_annual_interpolated_param_func <- function(INE_param, main_param, param) {
# calculates corrected new_muni for a given param
# time rules: expressed in average_AG_census_interpolation_period()
# 1 - compile new_muni data based on the time-rules established in average_AG_census_interpolation_period
AG_muni <- average_AG_census_interpolation_period(INE_param, main_param, param)
# 2 - call the AR data for a given param
AR <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = INE_param, subfolderX2 = main_param, pattern = param)
# 3 - compute the new_muni at the AR level
AG_AR <- loop_INE_muni_agrarian(df_merge = AG_muni, yrs = as.character(seq(1987,2017)))
calc_yrs <- paste0('X',seq(1987,2017))
names(AG_AR) <- c('id', paste0('X',seq(1987,2017)))
for (i in calc_yrs) {
# 1 - calculate FRAC of AR_yr / AR_AG_census
FRAC_AR <- data.frame(agrarian_region_id = seq(1,7))
FRAC_AR[, 'FRAC_AR'] <- AR[, i] / AG_AR[, i]
FRAC_AR <- data_cleaning(FRAC_AR)
# 2 - call spatial disaggregation and create a template calculation
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, FRAC_AR, 'agrarian_region_id')
# 4 - calculate new_muni
AG_muni[, i] <- round(AG_muni[, i] * disagg_df[, 'FRAC_AR'], 1)
}
return(AG_muni)
rm(list=c('AR','AG_AR','FRAC_AR','disagg_df'))
}
compute_annual_interpolated_param_func <- function(INE_param, main_param, param) {
# calculates corrected new_muni for a given param
# time rules: expressed in average_AG_census_interpolation_period()
# 1 - compile new_muni data based on the time-rules established in average_AG_census_interpolation_period
AG_muni <- average_AG_census_interpolation_period(INE_param, main_param, param)
# 2 - call the AR data for a given param
AR <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Agrarian', subfolder = INE_param, subfolderX2 = main_param, pattern = param)
# 3 - compute the new_muni at the AR level
AG_AR <- loop_INE_muni_agrarian(df_merge = AG_muni, yrs = as.character(seq(1987,2017)))
calc_yrs <- paste0('X',seq(1987,2017))
names(AG_AR) <- c('id', paste0('X',seq(1987,2017)))
for (i in calc_yrs) {
# 1 - calculate FRAC of AR_yr / AR_AG_census
FRAC_AR <- data.frame(agrarian_region_id = seq(1,7))
FRAC_AR[, 'FRAC_AR'] <- AR[, i] / AG_AR[, i]
FRAC_AR <- data_cleaning(FRAC_AR)
# 2 - call spatial disaggregation and create a template calculation
disagg_df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Spatial_disaggregation')
disagg_df <- merge(disagg_df, FRAC_AR, 'agrarian_region_id')
# 4 - calculate new_muni
AG_muni[, i] <- round(AG_muni[, i] * disagg_df[, 'FRAC_AR'], 1)
}
return(AG_muni)
rm(list=c('AR','AG_AR','FRAC_AR','disagg_df'))
}
linear_interpolation_other_params_func <- function(INE_param, main_param, param) {
# support function to linear interpolate other_dried_pulses and other_fresh
# this is used since there are no data outside the AG_census years
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param , pattern = param)
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
# interpolate the data to the other years
xout <- c(1987,1988,seq(1990,1998), seq(2000,2008), seq(2010,2017))
df <- linear_interpolation(muni_df = df)
template <- cbind(template, df)
return(template)
rm(list=c('param_interpol','yrs','df','new_yrs','xout'))
}
loop_annual_interpolated_param <- function(INE_param) {
standard_params <- get_activity_data(module = 'Nutrients', folder = 'Correct_data_Municipality', pattern = 'Standard_params')
param_col <- ifelse(INE_param == 'Areas', 'Crop', 'Animals')
main_param_col <- ifelse(INE_param == 'Areas', 'Main_crop', 'Main_animals')
for (i in 1:nrow(standard_params)) {
main_param <- standard_params[i, main_param_col]
param <- standard_params[i, param_col]
print(paste0('================= Downscaling and interpolating in-between AG_census municipality data for ', param))
if (param == 'Maize' | param == 'Potato') {
manag <- c('Rainfed','Irrigated')
for (j in manag) {
f_param <- paste0(j, '_', tolower(param))
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, f_param)
export_file(module = 'Nutrients', file = param_interpol, filename = f_param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
}
# other_dried_pulses and other_fresh must be linealry interpolated between 1989, 1999 and 2009 as no AR data is available
else if (param == 'Other_dried_pulses' | param == 'other_fresh') {
param_interpol <- linear_interpolation_other_params_func(INE_param, main_param, param)
export_file(module = 'Nutrients', file = param_interpol, filename = param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
else {
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, param)
export_file(module = 'Nutrients', file = param_interpol, filename = param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
}
rm(list=c('standard_params','param_col','main_param_col'))
}
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, param)
param_interpol
View(param_interpol)
loop_annual_interpolated_param('Areas')
param_interpol <- linear_interpolation_other_params_func('Areas','Pulses','other_dried_pulses')
param_interpol <- linear_interpolation_other_params_func('Areas','Pulses','Other_dried_pulses')
param_interpol <- linear_interpolation_other_params_func('Areas','Pulses','Other_dried_pulses')
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
# interpolate the data to the other years
xout <- c(1987,1988,seq(1990,1998), seq(2000,2008), seq(2010,2017))
df <- linear_interpolation(muni_df = df)
df
View(df)
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
param_interpol
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
df
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
df
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
df
head(df)
df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
df
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df
# interpolate the data to the other years
xout <- c(1987,1988,seq(1990,1998), seq(2000,2008), seq(2010,2017))
df <- linear_interpolation(muni_df = df)
function (x, y = NULL, xlab = NULL, ylab = NULL, log = NULL,
recycle = FALSE, setLab = TRUE)
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df
# interpolate the data to the other years
xout <- c(1987,1988,seq(1990,1998), seq(2000,2008), seq(2010,2017))
df <- linear_interpolation(muni_df = df, xout = xout)
df <- linear_interpolation(muni_df = df)
View(df)
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
View(df)
df <- df[, -c(1,2,3)]
# interpolate the data to the other years
xout <- c(1987,1988,seq(1990,1998), seq(2000,2008), seq(2010,2017))
df <- linear_interpolation(muni_df = df)
# interpolate the data to the other years
df <- linear_interpolation(muni_df = df)
template <- cbind(template, df)
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = 'Areas', subfolderX2 = 'Pulses' , pattern = 'Other_dried_pulses')
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df <- df[, -c(1,2,3)]
# interpolate the data to the other years
df <- linear_interpolation(muni_df = df)
template <- cbind(template, df)
View(template)
linear_interpolation_other_params_func <- function(INE_param, main_param, param) {
# support function to linear interpolate other_dried_pulses and other_fresh
# this is used since there are no data outside the AG_census years
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param , pattern = param)
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df <- df[, -c(1,2,3)]
# interpolate the data to the other years
df <- linear_interpolation(muni_df = df)
template <- cbind(template, df)
View(template)
return(template)
rm(list=c('param_interpol','yrs','df','new_yrs','xout'))
}
linear_interpolation_other_params_func <- function(INE_param, main_param, param) {
# support function to linear interpolate other_dried_pulses and other_fresh
# this is used since there are no data outside the AG_census years
template <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
df <- get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', pattern = 'Muni_INE')
param_interpol <-  get_activity_data(module = 'Nutrients', folder = 'Raw_data_Municipality', subfolder = INE_param, subfolderX2 = main_param , pattern = param)
names(param_interpol) <- gsub('X','',names(param_interpol))
# create empty dataframe where calculations will proceed
yrs <- seq(1987,2017)
df[, as.character(yrs)] <- NA
# collated AG_census dataa to the empty data.frame
new_yrs <- c(1989,1999,2009)
df[, as.character(new_yrs)] <- sapply(new_yrs, function(x) round(df[, as.character(x)] <- param_interpol[, as.character(x)], 1))
df <- df[, -c(1,2,3)]
# interpolate the data to the other years
df <- linear_interpolation(muni_df = df)
template <- cbind(template, df)
return(template)
rm(list=c('param_interpol','yrs','df','new_yrs','xout'))
}
compute_corrected_INE_param_AG_census('Areas')
loop_annual_interpolated_param <- function(INE_param) {
standard_params <- get_activity_data(module = 'Nutrients', folder = 'Correct_data_Municipality', pattern = 'Standard_params')
param_col <- ifelse(INE_param == 'Areas', 'Crop', 'Animals')
main_param_col <- ifelse(INE_param == 'Areas', 'Main_crop', 'Main_animals')
for (i in 1:nrow(standard_params)) {
main_param <- standard_params[i, main_param_col]
param <- standard_params[i, param_col]
print(paste0('================= Downscaling and interpolating in-between AG_census municipality data for ', param))
if (param == 'Maize' | param == 'Potato') {
manag <- c('Rainfed','Irrigated')
for (j in manag) {
f_param <- paste0(j, '_', tolower(param))
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, f_param)
export_file(module = 'Nutrients', file = param_interpol, filename = f_param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
}
# other_dried_pulses and other_fresh must be linealry interpolated between 1989, 1999 and 2009 as no AR data is available
else if (param == 'Other_dried_pulses' | param == 'other_fresh') {
param_interpol <- linear_interpolation_other_params_func(INE_param, main_param, param)
export_file(module = 'Nutrients', file = param_interpol, filename = param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
else {
param_interpol <- compute_annual_interpolated_param_func(INE_param, main_param, param)
export_file(module = 'Nutrients', file = param_interpol, filename = param, folder = 'Activity_data', subfolder = 'Correct_data_Municipality', subfolderX2 = INE_param, subfolderX3 = main_param)
}
}
rm(list=c('standard_params','param_col','main_param_col'))
}
loop_annual_interpolated_param('Areas')
