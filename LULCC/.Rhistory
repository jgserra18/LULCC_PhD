palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'))
tm_shape(sp_po4) + tm_dots(col='mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'))
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'))
po4 <- data.table::fread('C:\\Users\\serrm\\Desktop\\Waterbase_rivers_PO4.csv')
sp_po4 <- SpatialPoints(po4[, 5:6], proj4string = CRS('+proj=longlat +datum=WGS84 +no_defs'))
sp_po4   <- spTransform(sp_po4, proj4string(eu))
sp_po4 <- SpatialPointsDataFrame(sp_po4, po4)
sp_po4 <- spTransform(sp_po4, CRSobj = CRS(eu))
tm_shape(eu) + tm_fill(col='grey4') +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'))
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'))
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'), size=.5)
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'), size=.2)
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'), size=.1)
riv <- read_sf('C:\\Users\\serrm\\Downloads\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\shapefile\\SurfaceWaterBody\\SurfaceWaterBodyLine.shp')
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(riv) + tm_lines() +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'), size=.1)
riv
riv <- spTransform(riv, CRSobj = CRS(eu))
riv
riv <- spTransform(riv, CRS(eu))
riv
riv <- spTransform(st_geometry(riv), CRS(eu))
riv <- rgdal::readOGR('C:\\Users\\serrm\\Downloads\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\shapefile\\SurfaceWaterBody\\SurfaceWaterBodyLine.shp')
gc()
riv <- rgdal::readOGR('C:\\Users\\serrm\\Downloads\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\shapefile\\SurfaceWaterBody\\SurfaceWaterBodyLine.shp')
riv <- rgdal::readOGR('C:\\Users\\serrm\\Desktop/riversEU.shp')
riv <- read_sf('C:\\Users\\serrm\\Desktop/riversEU.shp')
riv
r <- raster(crs(eu), ext = extent(riv), res=100)
r <- raster(crs(riv), ext = extent(riv), res=100)
library(raster)
r <- raster(crs(riv), ext = extent(riv), res=100)
eu
riv
r <- raster(res=100, ext = extent(riv), crs=crs(riv))
rivv <- fasterize(riv, r)
rivv <- fasterize(st_geometry(riv), r)
rivv <- fasterize(st_geometry(riv), r)
riv <- st_cast(riv, 'POLYGON')
riv <- st_cast(riv$localId, 'POLYGON')
riv <- st_cast(riv$namespace, 'POLYGON')
riv <- st_cast(riv, 'MULTIPOLYGON')
riv <- st_buffer(riv, dist = 1000)
gc()
riv <- raster('C:\\Users\\serrm\\Desktop/r_riv.tif')
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(riv) + tm_raster() +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'), size=.1)
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(riv) + tm_raster(palette = 'black', legend.show = F) +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0, 0.02, 0.05, 0.1, 0.2, 0.4, +Inf),
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1'), size=.1)
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(riv) + tm_raster(palette = 'black', legend.show = F) +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0, 0.02, 0.05, 0.1, 0.2, 0.4, +Inf), title = 'mg PO4-P L-1',
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1', 'purple'), size=.1)
tmap_save(filename = 'C:\\Users\\serrm\\Desktop/surface_wat_PO4_EU.pdf', dpi=600)
tm_shape(eu) + tm_fill(col='grey') +
tm_shape(riv) + tm_raster(palette = 'black', legend.show = F) +
tm_shape(sp_po4) + tm_dots(col='Mean', breaks = c(0, 0.02, 0.05, 0.1, 0.2, 0.4, +Inf), title = 'mg PO4-P L-1',
palette = c('blue1', 'green1', 'yellow1', 'orange1', 'red1', 'purple'), size=.05)
tmap_save(filename = 'C:\\Users\\serrm\\Desktop/surface_wat_PO4_EU.pdf', dpi=600)
library(data.table)
library(sf)
d <- fread('C:\\Users\\serrm\\Desktop\\EEA_datasets\\EEA_quality\\Waterbase_Groundwater_v14_csv(1)\\Waterbase_groundwater_v14_Bodies.csv')
shp <- read_sf('C:\\Users\\serrm\\Downloads\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\shapefile\\GroundWaterBody\\GroundWaterBody.shp')
shp$thematicId
colnames(d)[4] <- 'thematicId'
ss <- merge(shp, d, 'thematicId')
ss$Artificial_Recharge
View(as.data.frame(ss))
str(d)
d <- fread('C:\\Users\\serrm\\Desktop\\Waterbase_groundwater_v14_Bodies.csv')
d
head(d)
colnames(d)[4] <- 'thematicId'
head(d)
d$thematicId
shp$thematicId
str(shp$themaIdSch)
str(shp$thematicId)
str(d$thematicId)
ss <- merge(shp, d, 'thematicID')
d <- fread('C:\\Users\\serrm\\Desktop\\Waterbase_groundwater_v14_Bodies.csv')
colnames(d)[4] <- 'thematicId'
shp <- read_sf('C:\\Users\\serrm\\Downloads\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\eea_v_4326_250_k_wise-wfd2016_p_2016-2019_v01_r03\\shapefile\\GroundWaterBody\\GroundWaterBody.shp')
ss <- merge(shp, d, 'thematicId')
ss$Artificial_Recharge
ss$Water_Abstractions
require('raster')
require('sf')
require(raster)
d <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\Irrigation_N\\irrigN_total.tif')
d <- aggregate(d, 5)
plot(d)
require(tmap)
tm_shape(d) +
tm_raster(style='cont')
tm_shape(d) +
tm_raster(style='cont', palette = 'Reds')
d[[is.na()]] <- NA
d[[d[[1]]==0] <- NA
d[[d$irrigN_total==0] <- NA
d[[d$irrigN_total==0] <- NA
d[[d$irrigN_total==0]] <- NA
d[d$irrigN_total==0] <- NA
tm_shape(d) +
tm_raster(style='cont', palette = 'Reds')
tm_shape(d) +
tm_raster(style='cont', palette = 'Viridis')
tm_shape(d) +
tm_raster(style='cont', palette = 'viridis')
tm_shape(d) +
tm_raster(style='order', palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, +Inf), palette = 'viridis')
cellStats(d, 'sum')
d <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\Irrigation_N\\irrigN_total.tif')
d <- aggregate(d, 5, fun='sum')
cellStats(d, 'sum')
cellStats(d, 'sum')/1000
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, +Inf), palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 20, 30, +Inf), palette = 'viridis')
cellStats(d, 'sum')
d <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\Irrigation_N\\irrigN_total.tif')
cellStats(d, 'sum')
d <- aggregate(d, 5, fun='sum')
cellStats(d, 'sum')
ia <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\IA_crops/IA.tif')
dd <- d*ia
dd[dd$irrigN_total==0] <- NA
ia <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\IA_crops/IA.tif')
d <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\Irrigation_N\\irrigN_total.tif')
dd <- d*ia
plot(dd)
cellStats(d, 'sum')
cellStats(dd, 'sum')
cellStats(dd, 'sum')/1000
cellStats(dd, 'sum')/1000000
cellStats(d, 'sum')*10000
cellStats(d, 'sum')*10000/1000000
d <- aggregate(d, 5, fun='sum')
d[d$irrigN_total==0] <- NA
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 20, 30, +Inf), palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 20, 50, +Inf), palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, 50, 100, +Inf), palette = 'viridis')
d <- raster('G:\\O meu disco\\IrrigatioN_EU\\Output\\Irrigation_N\\irrigN_total.tif')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, 50, 100, +Inf), palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, +Inf), palette = 'viridis')
d
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, 50, 213), style='cont', palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 1, 5, 10, 25, 50, 100, 150, 213), style='cont', palette = 'viridis')
tm_shape(d) +
tm_raster(breaks = c(0, 0.5, 1,2.5, 5, 10, 25, 50, 100, 150, 213), style='cont', palette = 'viridis')
d[d$irrigN_total==0] <- NA
tm_shape(d) +
tm_raster(breaks = c(0, 0.5, 1,2.5, 5, 10, 25, 50, 100, 150, 213), style='cont', palette = 'viridis')
tmap_mode('view')
tm_shape(d) +
tm_raster(breaks = c(0, 0.5, 1,2.5, 5, 10, 25, 50, 100, 150, 213), style='cont', palette = 'viridis')
devtools::install_github("Nowosad/popgrids")
require(pogrids)
require(popgrids)
plot(pop_grid, "p_2010")
plot(gdp_grid, "g3_2100")
gdp_grid
names(gdp_grid)
plot(gdp_grid=='g_2010')
plot(gdp_grid[[1]]=='g_2010')
plot(names(gdp_grid)=='g_2010')
pop_grid
names(pop_grid)
plot(pop_grid, 'p_1980')
pop_2010 <- pop_grid[[4]]
pop_2010
pop_2010 <- pop_2010 * 55.5
plot(pop_2010)
require(tmap)
pop_2010 <- crop(pop_2010, extent(-9, 25, 38, 50))
plot(pop_2010)
pop_2010 <- pop_grid[[4]]
pop_2010 <- pop_2010 * 55.5
pop_2010 <- crop(pop_2010, extent(-7, 30, 35, 60))
plot(pop_2010)
pop_2010 <- pop_grid[[4]]
pop_2010 <- pop_2010 * 55.5
pop_2010 <- crop(pop_2010, extent(-15, 30, 35, 70))
plot(pop_2010)
pop_2010 <- pop_grid[[4]]
pop_2010 <- pop_2010 * 55.5
pop_2010 <- crop(pop_2010, extent(-15, 30, 35, 70))
plot(pop_2010)
pop_2010 <- pop_grid[[4]]
pop_2010 <- pop_2010 * 55.5
pop_2010 <- crop(pop_2010, extent(-12, 30, 35, 70))
plot(pop_2010)
install.packages("climate")
require(climate)
nearest_stations_ogimet(country = "United+Kingdom",
date = Sys.Date(),
add_map = TRUE,
point = c(-1, 53),
no_of_stations = 100
)
nearest_stations_ogimet(country = "Portugal",
date = Sys.Date(),
add_map = TRUE,
point = c(-1, 53),
no_of_stations = 100
)
nearest_stations_ogimet(country = "PRT",
date = Sys.Date(),
add_map = TRUE,
point = c(-1, 53),
no_of_stations = 100
)
nearest_stations_ogimet(country = "PORTUGAL",
date = Sys.Date(),
add_map = TRUE,
point = c(-1, 53),
no_of_stations = 100
)
nearest_stations_ogimet(country = "Portugal",
date = Sys.Date(),
add_map = TRUE,
point = c(-1, 53),
no_of_stations = 100
)
nearest_stations_ogimet(country = "Portugal",
date = Sys.Date(),
add_map = TRUE,
#    point = c(-1, 53),
no_of_stations = 100
)
nearest_stations_ogimet(country = "Portugal",
date = Sys.Date(),
add_map = TRUE,
point = c(-8, 39),
no_of_stations = 100
)
df <- sample(x = 10, size = 3)
df
boxplot(df)
df <- sample(x = 10, size = 100)
df <- sample(x = 10, size = 100)
df <- sample(x = 10, size = 100, replace = T)
boxplot(df)
df <- data.frame(val=df, id=seq(1,100))
require(ggplot2)
ggplot(df, aes(id,df)) +
geom_line()
str(df)
ggplot(df, aes(x=id,y=df)) +
geom_line()
ggplot(df, aes(x=id,y=val)) +
geom_point()
ggplot(df, aes(x=id,y=val)) +
geom_line()
source('G:/O meu disco/LULCC_PhD/Model/Main/Set_directory.R', echo=TRUE)
source('./Model/Main/Main_functions.R')
library(rjson)
## ----------------------- WEB SCRAPING FUNCTIONS --------------------- ##
## ---------------------------------------------------------------------##
get_INE_data <- function(INE_param_id, year, muni_id, var_id, other_params) {
print('Exporting INE DB ...... ')
# convert to json file
url <- paste0('https:/www.ine.pt/ine/json_indicador/pindica.jsp?op=2&varcd=', INE_param_id,
'&Dim1=', year, '&Dim2=',
muni_id, '&Dim3=',
var_id, '&lang=PT')
url <- gsub('/', '//', url)
# test <- getURL(URLencode(test))
json_df <- jsonlite::fromJSON(url)
if (missing(other_params)==TRUE) {
json_df <- json_df[[7]][[1]][[1]][5]
return(json_df)
}
else {
json_df <- json_df[[7]][[1]][[1]]
json_df <- subset(json_df, dim_4=='T' & dim_5 =='T')[ncol(json_df)]
return(json_df)
}
}
get_agrarian_region_INE <- function(INE_param_id, var_id,
year = seq(1987,2017),
muni_id = as.character(seq(1,7)),
other_params) {
# EXCEPTIONS: FORAGE, HORTICULTURE, POULTRY, RABBITS
# param_modifier regards information that shifts the IDs of the different agrarian regions
# this is either because there are no regional data (horticulture)
# or because data was collated from the census
df <- data.frame()
print(muni_id)
for (i in seq_along(muni_id)) {
print(paste0('Agrarian region: ', i))
df[i, 'id'] <- i
for (j in year) {
print(paste0('Year: ', j))
js_year <- paste0('S7A', j)
df[i, as.character(j)] <- get_INE_data(INE_param_id, js_year, muni_id[i], var_id, other_params)
}
}
return(df)
}
## ----------------------- SCRAP AND POPULATE CROP DATA --------------------- ##
## ---------------------------------------------------------------------------##
forage_horticulture_populate_modifier <- function(var_id,
muni_id = as.character(seq(11,17))) {
# in work
# 0005640 is 2009,2013,2016
# 0002749 1989,1993,1995,1997,1999,2003,2005,2007
crop_dfA <- get_agrarian_region_INE(INE_param_id = '0002749', var_id = var_id, year = c(1989,1993,1995,1997,1999,2003,2005,2007), muni_id = muni_id, other_params = 'Yes')
crop_dfB <- get_agrarian_region_INE(INE_param_id = '0005637', var_id = var_id, year = c(2009,2013,2016), muni_id = muni_id, other_params = 'Yes')
crop_df <- merge(crop_dfA, crop_dfB,'id')
return(crop_df)
}
populate_perma_pastures_DB <- function(muni_id = as.character(seq(11,17))) {
crop_df <- get_agrarian_region_INE(INE_param_id = '0003485', var_id = 'T', year = as.character(c(1989,1993,1995,1997,1999,2003,2005,2007,2009,2013)), muni_id = muni_id)
export_file(file = crop_df, folder = 'Activity_data', filename = 'extensive_pasture', subfolder = 'Regional_crop',
subfolderX2 = 'Areas', subfolderX3 = 'Pastures')
}
main_populate_crop_param_DB <- function() {
# EXCEPTIONS: FORAGE, HORTICULTURE, POULTRY, RABBITS
# this populates the activity data for crop parameters (yields, acreage) based on the "Crop_ids" file
# parses Statistics Portugal
# units: YIELDS (kg FM yr-1)
# units: AREAS (ha yr-1)
params_df <-  get_activity_data(folder = 'Regional_crop', pattern = 'Crop_ids')
params <- data.frame(Param_name = c('Areas','Yields'),
Param_id = c('0000019', '0000023'))
for (i in 1:nrow(params)) {
INE_param_id <- params[i,2]
for (j in 1:nrow(params_df)) {
print(params_df[j, 'Crop_id'])
var_id <- params_df[j, 'Crop_id']
main_crop <- params_df[j,'Main_crop']
crop_df <- get_agrarian_region_INE(INE_param_id = INE_param_id, var_id = var_id)
# create directory for params
path <- create_activityData_folders(folder = 'Activity_data', subfolder = 'Regional_crop', subfolderX2 = params[i,1])
crop_name <- params_df[j, 'Crop']
print('========== Exporting ....')
export_file(file = crop_df, folder = 'Activity_data', filename = crop_name, subfolder = 'Regional_crop', subfolderX2 = params[i,1], subfolderX3 = main_crop)
}
}
# clean the work environment
rm(list=c('params_df', 'params', 'var_id', 'crop_df', 'path', 'crop_name'))
}
populate_other_crops_param_DB <- function() {
# populate INE data for forage and horticultural crops as well as intensive pastures
params_df <-  get_activity_data(folder = 'Regional_crop', pattern = 'Other_crops_ids')
for (i in 1:nrow(params_df)) {
print(params_df[i, 'Crop_id'])
var_id <- params_df[i, 'Crop_id']
crop_name <- params_df[i, 'Crop']
crop_df <- forage_horticulture_populate_modifier(var_id = var_id)
print('========== Exporting ....')
export_file(file = crop_df, folder = 'Activity_data', filename = crop_name, subfolder = 'Regional_crop', subfolderX2 = 'Areas', subfolderX3 = params_df[i,2])
}
}
## ----------------------- CORRECT VALUES --------------------- ##
## -------------------------------------------------------------##
correct_missing_values_vars <- function(param, main_var) {
# SELF-EXPLANATORY, CORRECTS "-"
# param is Areas, Yields
# main_var is e.g., Cereals
var_path <- get_mainfolder_sub(main_folder = 'Activity_data', pattern = 'Regional_crop')
var_path <- file.path(var_path,param,main_var)
files <- list.files(path = var_path, full.names = TRUE)
for (i in files) {
print(i)
# correct NAs
r_file <- read.csv(i, stringsAsFactors = F)
r_file <- sapply(r_file, as.numeric)
# check if NAs exist
condition <- which(is.na(r_file)==TRUE,arr.ind = TRUE)
if (dim(condition)[1]>0) {
print('Correcting "-".')
crr_NA <- which(is.na(r_file)==TRUE, arr.ind = T)
for (j in 1:nrow(crr_NA)) {
id_1 <- crr_NA[j,1]
id_2 <- crr_NA[j,2]
r_file[id_1,id_2] <- 0
write.csv(x = r_file, file = i, row.names = F)
}
}
else {
print('No NAs')
}
}
}
correct_all_missing_values <- function() {
params <- c('Areas','Yields')
for (i in params) {
# find the main vars
var_path <- get_mainfolder_sub(main_folder = 'Activity_data', pattern = 'Regional_crop')
var_path <- file.path(var_path,i)
main_vars <- list.files(path = var_path)
# now correct every main_var
for (j in main_vars) {
correct_missing_values_vars(param = i, main_var = j)
}
}
}
## ----------------------- TIMSERIES LINEAR EXTRAPOLATION --------------------- ##
## -----------------------------------------------------------------------------##
interpolate_other_crops_timeseries <- function(param, main_crop, crop) {
# param is either Areas or Yields
# RULE: if estimated value is lower than min or max, the estimated value is set to either the min or max
# linear extrapolation
print('========= Reading')
crop_df <- get_activity_data(folder = 'Regional_crop', pattern = crop, subfolder = param, subfolderX2 = main_crop)
names(crop_df) <- gsub('X','',names(crop_df))
print('==== Creating template df.')
# create template df
df <- data.frame(id = seq(1,7))
yrs <- seq(1987,2017)
for (i in yrs) {
df[, as.character(i)] <- NA
}
print('==== Populating template df with crop df.')
# populate template df with crop_df
# missing years are populated with NA
new_yrs <- names(crop_df)[-1]
for (i in new_yrs) {
df[, as.character(i)] <- crop_df[, as.character(i)]
}
df <- df[, -1]
print('==== Interpolating timeseries.')
#linearly interpolate years without any value
for (i in 1:nrow(df)) {
# select x_out for different crops
if (crop=='extensive_pasture') {
xout <- c(1987,1988,1990,1991,1992,1994,1996,1998,2000,2001,2002,2004,2006,2008,2010,2011,2012,2014,2015,2016,2017)
} else if (crop=='intensive_pasture') {
xout <- c(1987,1988,1990,1991,1992,1994,1996,1998,2000,2001,2002,2004,2006,2008,2010,2011,2012,2014,2015,2017)
} else {
xout <- c(1987,1988,1990,1991,1992,1994,1996,1998,2000,2001,2002,2004,2006,2008,2010,2011,2012,2014,2015,2017)
}
new_df <- approx(x= as.numeric(yrs), y = df[i,],
xout = xout, rule = 2)
inter_years <- new_df[[1]]
inter_values <- round(new_df[[2]], 0)
ctr <- 0
for (j in inter_years) {
ctr <- ctr + 1
df[i, as.character(j)] <- inter_values[ctr]
}
}
df[, 'id'] <- seq(1,7)
df <- df[, c('id', as.character(seq(1987,2017)))]
return(df)
rm(list=c('crop_df','yrs','new_yrs','new_df','inter_years','inter_values','ctr'))
}
loop_interpolate_other_crops_timeseries <- function() {
params_df <-  get_activity_data(folder = 'Regional_crop', pattern = 'Other_crops_ids')
for (i in 1:nrow(params_df)) {
main <- as.character(params_df[i, 'Main_crop'])
crops <- as.character(params_df[i, 'Crop'])
print('======== Interpolating ')
crop_df <- interpolate_other_crops_timeseries(param = 'Areas', main_crop = main, crop =crops)
print('========== Exporting ....')
export_file(file = crop_df, folder = 'Activity_data', filename = crops, subfolder = 'Regional_crop', subfolderX2 = 'Areas', subfolderX3 = main)
}
}
dir_path <- '/home/jserra/google-drive/LULCC_PhD/'
dir_isa <- 'G:/My Drive/LULCC_PhD/'
dir_home <- 'G:/O meu disco/LULCC_PhD/'
store_db <- c(dir_path, dir_isa, dir_home)
correct_path <- which(dir.exists(store_db)==TRUE)
correct_path
store_db[correct_path]
d <- store_db[correct_path]
d
d <- list.files(path = d, pattern = 'LULCC', full.names = T)
d
load_dir <- function(module) {
dir_path <- '/home/jserra/google-drive/LULCC_PhD/'
dir_isa <- 'G:/My Drive/LULCC_PhD/'
dir_home <- 'G:/O meu disco/LULCC_PhD/'
store_db <- c(dir_path, dir_isa, dir_home)
correct_path <- which(dir.exists(store_db)==TRUE)
correct_path <- store_db[correct_path]
correct_path <- list.files(path = correct_path, pattern = module, full.names = TRUE)
setwd(correct_path)
}
source('./Model/Main/Set_directory.R')
source('./Main/Set_directory.R')
load_dir(module = 'LULCC')
